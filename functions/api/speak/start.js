// Cloudflare Pages Function: POST /api/speak/start
// Input: { title: string, transcript: string }
// Output: { ok: true, previewUrl, slug } or { ok:false, error }

const OWNER = "SheenaBadabina";
const REPO  = "vibescript-landing";

export async function onRequestPost({ request, env }) {
  try {
    const { title, transcript } = await request.json();
    if (!title || !transcript) {
      return json({ ok: false, error: "Missing title or transcript." }, 400);
    }

    const slug = slugify(title).slice(0,64) || "site-" + Date.now();
    const path = `sites/${slug}/index.html`;

    // Fetch meta prompt template from repo
    const prompt = await fetchRawFromRepo(env, "prompts/website.meta.txt").catch(()=>DEFAULT_PROMPT);
    const rendered = renderTemplate(prompt, { title, transcript, slug, now: new Date().toISOString() });

    // Produce a simple static HTML using the rendered meta-fields
    const html = generateSiteHTML(rendered);

    // Commit file to GitHub
    const commitOk = await upsertFile(env, path, html, `feat(sites): generate ${slug} from speech`);
    if (!commitOk.ok) {
      return json({ ok:false, error: "GitHub commit failed." }, 502);
    }

    // Send back the live preview path
    const previewUrl = `https://vibescript.online/sites/${encodeURIComponent(slug)}/index.html`;
    return json({ ok:true, previewUrl, slug }, 200);
  } catch (e) {
    return json({ ok:false, error:"Server error" }, 500);
  }
}

// --- helpers ---
function json(body, status=200){
  return new Response(JSON.stringify(body), {
    status,
    headers: { "content-type":"application/json; charset=utf-8", "cache-control":"no-store" }
  });
}
function slugify(s){
  return String(s).toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)/g,'');
}
function b64(s){ return btoa(unescape(encodeURIComponent(s))); }

async function fetchRawFromRepo(env, filePath){
  const token = env.GITHUB_TOKEN;
  if(!token) throw new Error("Missing GITHUB_TOKEN");
  const url = `https://api.github.com/repos/${OWNER}/${REPO}/contents/${encodeURIComponent(filePath)}`;
  const r = await fetch(url, { headers: { "authorization": `Bearer ${token}`, "accept":"application/vnd.github.raw" }});
  if(!r.ok) throw new Error("fetch raw failed");
  return await r.text();
}

async function getFileSha(env, filePath){
  const token = env.GITHUB_TOKEN;
  const url = `https://api.github.com/repos/${OWNER}/${REPO}/contents/${encodeURIComponent(filePath)}`;
  const r = await fetch(url, { headers: { "authorization": `Bearer ${token}` }});
  if (r.status === 404) return null;
  if (!r.ok) throw new Error("get sha failed");
  const j = await r.json();
  return j.sha || null;
}

async function upsertFile(env, filePath, content, message){
  const token = env.GITHUB_TOKEN;
  if(!token) return { ok:false, error:"Missing GITHUB_TOKEN" };
  const sha = await getFileSha(env, filePath).catch(()=>null);
  const url = `https://api.github.com/repos/${OWNER}/${REPO}/contents/${encodeURIComponent(filePath)}`;
  const body = { message, content: b64(content), sha: sha || undefined };
  const r = await fetch(url, {
    method: "PUT",
    headers: { "authorization": `Bearer ${token}`, "content-type":"application/json" },
    body: JSON.stringify(body)
  });
  return { ok: r.ok };
}

function renderTemplate(tpl, vars){
  return tpl.replace(/\{\{(\w+)\}\}/g, (_,k)=> (vars[k] ?? ''));
}

const DEFAULT_PROMPT = `
# WEBSITE META PROMPT (Default)
Title: {{title}}
Slug: {{slug}}
Now: {{now}}

# USER DESCRIPTION
{{transcript}}

# Derive:
- Primary audience:
- Tone (2-4 adjectives):
- Primary CTA:
- Sections (Hero, Features, Social Proof, Contact)
- 3 Feature bullets:
`;

function generateSiteHTML(meta){
  // very basic parse — in a real system you’d structure this with YAML/JSON
  const safe = (s)=>String(s||'').replace(/[<>]/g, c => ({'<':'&lt;','>':'&gt;'}[c]));
  return `<!doctype html>
<html lang="en"><head>
<meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Generated — VibeScript</title>
<meta name="description" content="Generated by VibeScript from spoken description.">
<link rel="icon" href="/assets/file_0000000034986115891169618f3eb38a.png" type="image/png" />
<style>
:root{--bg:#0a0c10;--text:#eef3ff;--muted:#9fb0c8;--card:#0f1218;--ring:rgba(255,255,255,.18);
--r:#ef4444;--o:#f97316;--y:#eab308;--g:#22c55e;--b:#3b82f6;--i:#6366f1;--v:#8b5cf6}
*{box-sizing:border-box}body{margin:0;background:var(--bg);color:var(--text);font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif}
.container{max-width:1000px;margin:0 auto;padding:16px}
.hero{min-height:50svh;display:grid;align-items:center;background:
  linear-gradient(180deg,rgba(10,12,16,.20),rgba(10,12,16,.92)),
  radial-gradient(70% 50% at 50% 0%,rgba(99,102,241,.18),transparent 60%),
  url("/assets/file_000000001048622f95bff34ddca0e28a.png") center/cover no-repeat}
.card{background:var(--card);border:1px solid rgba(159,176,200,.16);border-radius:16px;padding:16px}
.btn{display:inline-block;padding:12px 16px;border-radius:12px;color:#fff;text-decoration:none;font-weight:900;
  background:linear-gradient(90deg,var(--r),var(--o),var(--y),var(--g),var(--b),var(--i),var(--v))}
h1{font-size:clamp(28px,7vw,48px);letter-spacing:-.01em;margin:.2em 0}
p{color:var(--muted)}
.grid{display:grid;gap:12px}
@media(min-width:720px){.grid{grid-template-columns:repeat(3,1fr)}}
</style></head><body>
<header class="hero"><div class="container">
  <h1 id="title"></h1>
  <p id="tagline">Generated site from your spoken description.</p>
  <a class="btn" href="#contact">Get in touch</a>
</div></header>
<main>
  <section class="container" id="about"><div class="card"><h2>About</h2><pre style="white-space:pre-wrap">${safe(meta)}</pre></div></section>
  <section class="container"><div class="grid">
    <div class="card"><h3>Feature One</h3><p>Auto-drafted from your description.</p></div>
    <div class="card"><h3>Feature Two</h3><p>Brand-aligned language.</p></div>
    <div class="card"><h3>Feature Three</h3><p>Conversion-focused copy.</p></div>
  </div></section>
  <section class="container" id="contact"><div class="card"><h2>Contact</h2><p>Email: admin@vibescript.online</p></div></section>
</main>
<footer><div class="container" style="color:#9fb0c8">© 2025 VibeScript</div></footer>
<script>
document.getElementById('title').textContent = ((${JSON.stringify(meta)}).match(/Title:\\s*(.*)/)||[])[1] || 'Your Site';
</script>
</body></html>`;
     }
